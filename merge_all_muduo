{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2c0e6773-696b-422c-acc0-ce54612c4c76",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from Read_tfidf_Muduo import t_tfidf_dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "91437674-4480-4257-b438-338ae16e3118",
   "metadata": {},
   "outputs": [],
   "source": [
    "from Read_tfidf_Muduo import t_tfidf_dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a13645f9-71a7-403e-b608-1811108f8b73",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-1f4010f7b6cd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mamc_minutely\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"./stocks/amc_1min.csv.zip\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mamc_minutely\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mamc_minutely\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"time\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"
     ]
    }
   ],
   "source": [
    "amc_minutely = pd.read_csv(\"./stocks/amc_1min.csv.zip\")\n",
    "amc_minutely=amc_minutely.sort_values(\"time\").reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cbac9a9a-d8b7-49ff-933a-e36e774d18fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e27d8d3c-90f3-44cf-bb34-3a031978dd4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "times = []\n",
    "times.append(dt.datetime(2019, 7, 24, 9, 29))\n",
    "for day in range(1,356):\n",
    "    for minute in range(1,1440):\n",
    "        times.append(dt.datetime(2019, 7, 24, 9, 29) + dt.timedelta(0,60)*(minute)+dt.timedelta(1)*(day))\n",
    "        \n",
    "df_times_col = pd.DataFrame(times)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e54b1147-34e4-4cc9-a9f3-dabfb391b946",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_times_col.columns = [\"time\"]\n",
    "df_times_col = df_times_col.set_index([\"time\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53410fa0-32a3-41e6-8254-d443546bbaba",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.concat([df_times_col, tfidf], axis =1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d73bfc45-27fa-4f6c-9d83-2deeab5390e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "intvs = [1,2,5,10,30,60,120,360,1440]\n",
    "\n",
    "df[f\"{intvs}m%Chg\"]\n",
    "\n",
    "iterator = 0 # Don't over print\n",
    "\n",
    "\n",
    "for minute in range(len(df)):\n",
    "    iterator += 1 # Don't over print\n",
    "    # Iterate over each comment in every minute\n",
    "    for itv in intvs:\n",
    "        print (df.iloc[minute+itvs].close)\n",
    "        \n",
    "        '''Add check for night or not'''\n",
    "    \n",
    "    if df.iloc[minute+itvs]\n",
    "    \n",
    "    \n",
    "    \n",
    "    if iterator > 5:\n",
    "        break\n",
    "        # Get price 1 minute in the future\n",
    "        \n",
    "#         print (df_by_minute.iloc[minute].features.iloc[single_comment].close) # Price @ comment time\n",
    "            "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
