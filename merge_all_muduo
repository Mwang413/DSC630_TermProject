{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2c0e6773-696b-422c-acc0-ce54612c4c76",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from Read_tfidf_Muduo import t_tfidf_dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dfa5a092-97d1-426b-bc12-5458e81aace5",
   "metadata": {},
   "outputs": [],
   "source": [
    "tfidf = t_tfidf_dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a13645f9-71a7-403e-b608-1811108f8b73",
   "metadata": {},
   "outputs": [],
   "source": [
    "amc_minutely = pd.read_csv(\"./stocks/amc_1min.csv.zip\")\n",
    "amc_minutely=amc_minutely.sort_values(\"time\").reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cbac9a9a-d8b7-49ff-933a-e36e774d18fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "e27d8d3c-90f3-44cf-bb34-3a031978dd4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "times = []\n",
    "times.append(dt.datetime(2019, 7, 24, 9, 29))\n",
    "for day in range(1,356):\n",
    "    for minute in range(1,1440):\n",
    "        times.append(dt.datetime(2019, 7, 24, 9, 29) + dt.timedelta(0,60)*(minute)+dt.timedelta(1)*(day))\n",
    "        \n",
    "df_times_col = pd.DataFrame(times)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e54b1147-34e4-4cc9-a9f3-dabfb391b946",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_times_col.columns = [\"time\"]\n",
    "df_times_col = df_times_col.set_index([\"time\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "fcef7c32-0375-4179-a1b7-5976e551f4ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "amc_minutely.time = pd.to_datetime(amc_minutely.time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "53410fa0-32a3-41e6-8254-d443546bbaba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-07-25 09:31:00</td>\n",
       "      <td>10.303700</td>\n",
       "      <td>10.317997</td>\n",
       "      <td>10.303700</td>\n",
       "      <td>10.310849</td>\n",
       "      <td>34881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-07-25 09:32:00</td>\n",
       "      <td>10.303700</td>\n",
       "      <td>10.360890</td>\n",
       "      <td>10.294168</td>\n",
       "      <td>10.341827</td>\n",
       "      <td>13442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-07-25 09:33:00</td>\n",
       "      <td>10.313232</td>\n",
       "      <td>10.322763</td>\n",
       "      <td>10.284637</td>\n",
       "      <td>10.312374</td>\n",
       "      <td>6423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-07-25 09:34:00</td>\n",
       "      <td>10.332009</td>\n",
       "      <td>10.427611</td>\n",
       "      <td>10.303700</td>\n",
       "      <td>10.408548</td>\n",
       "      <td>14054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-07-25 09:35:00</td>\n",
       "      <td>10.389485</td>\n",
       "      <td>10.427611</td>\n",
       "      <td>10.332295</td>\n",
       "      <td>10.360890</td>\n",
       "      <td>8024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107677</th>\n",
       "      <td>2020-07-14 09:07:00</td>\n",
       "      <td>4.280000</td>\n",
       "      <td>4.280000</td>\n",
       "      <td>4.270000</td>\n",
       "      <td>4.270000</td>\n",
       "      <td>2600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107678</th>\n",
       "      <td>2020-07-14 09:11:00</td>\n",
       "      <td>4.280000</td>\n",
       "      <td>4.280000</td>\n",
       "      <td>4.280000</td>\n",
       "      <td>4.280000</td>\n",
       "      <td>179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107679</th>\n",
       "      <td>2020-07-14 09:18:00</td>\n",
       "      <td>4.280000</td>\n",
       "      <td>4.280000</td>\n",
       "      <td>4.270000</td>\n",
       "      <td>4.270000</td>\n",
       "      <td>805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107680</th>\n",
       "      <td>2020-07-14 09:24:00</td>\n",
       "      <td>4.260100</td>\n",
       "      <td>4.270000</td>\n",
       "      <td>4.260000</td>\n",
       "      <td>4.260000</td>\n",
       "      <td>2224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107681</th>\n",
       "      <td>2020-07-14 09:27:00</td>\n",
       "      <td>4.260000</td>\n",
       "      <td>4.260000</td>\n",
       "      <td>4.260000</td>\n",
       "      <td>4.260000</td>\n",
       "      <td>9700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>107682 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      time       open       high        low      close  volume\n",
       "0      2019-07-25 09:31:00  10.303700  10.317997  10.303700  10.310849   34881\n",
       "1      2019-07-25 09:32:00  10.303700  10.360890  10.294168  10.341827   13442\n",
       "2      2019-07-25 09:33:00  10.313232  10.322763  10.284637  10.312374    6423\n",
       "3      2019-07-25 09:34:00  10.332009  10.427611  10.303700  10.408548   14054\n",
       "4      2019-07-25 09:35:00  10.389485  10.427611  10.332295  10.360890    8024\n",
       "...                    ...        ...        ...        ...        ...     ...\n",
       "107677 2020-07-14 09:07:00   4.280000   4.280000   4.270000   4.270000    2600\n",
       "107678 2020-07-14 09:11:00   4.280000   4.280000   4.280000   4.280000     179\n",
       "107679 2020-07-14 09:18:00   4.280000   4.280000   4.270000   4.270000     805\n",
       "107680 2020-07-14 09:24:00   4.260100   4.270000   4.260000   4.260000    2224\n",
       "107681 2020-07-14 09:27:00   4.260000   4.260000   4.260000   4.260000    9700\n",
       "\n",
       "[107682 rows x 6 columns]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.merge(df_times_col,amc_minutely, on=\"time\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07eb70a3-a603-46a1-ba45-51776e625d9b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d73bfc45-27fa-4f6c-9d83-2deeab5390e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "intvs = [1,2,5,10,30,60,120,360,1440]\n",
    "\n",
    "df[f\"{intvs}m%Chg\"]\n",
    "\n",
    "iterator = 0 # Don't over print\n",
    "\n",
    "\n",
    "for minute in range(len(df)):\n",
    "    iterator += 1 # Don't over print\n",
    "    # Iterate over each comment in every minute\n",
    "    for itv in intvs:\n",
    "        print (df.iloc[minute+itvs].close)\n",
    "        \n",
    "        '''Add check for night or not'''\n",
    "    \n",
    "    if df.iloc[minute+itvs]\n",
    "    \n",
    "    \n",
    "    \n",
    "    if iterator > 5:\n",
    "        break\n",
    "        # Get price 1 minute in the future\n",
    "        \n",
    "#         print (df_by_minute.iloc[minute].features.iloc[single_comment].close) # Price @ comment time\n",
    "            "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
